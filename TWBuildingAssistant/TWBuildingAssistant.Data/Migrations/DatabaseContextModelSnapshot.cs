// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TWBuildingAssistant.Data.Sqlite;

namespace TWBuildingAssistant.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.Bonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProvincialEffectId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RegionalEffectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProvincialEffectId");

                    b.HasIndex("RegionalEffectId");

                    b.ToTable("Bonuses");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.BuildingBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowParallel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RegionType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RootBuildingLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SlotType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReligionId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("RootBuildingLevelId")
                        .IsUnique();

                    b.ToTable("BuildingBranches");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.BuildingBranchUse", b =>
                {
                    b.Property<int>("FactionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BuildingBranchId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FactionId", "BuildingBranchId");

                    b.HasIndex("BuildingBranchId");

                    b.ToTable("BuildingBranchUses");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.BuildingLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentBuildingLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RegionalEffectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentBuildingLevelId");

                    b.HasIndex("RegionalEffectId")
                        .IsUnique();

                    b.ToTable("BuildingLevels");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.BuildingLevelLock", b =>
                {
                    b.Property<int>("TechnologyLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BuildingLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Antilegacy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Lock")
                        .HasColumnType("INTEGER");

                    b.HasKey("TechnologyLevelId", "BuildingLevelId");

                    b.HasIndex("BuildingLevelId");

                    b.ToTable("BuildingLevelLocks");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.Climate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Climates");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.Faction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Factions");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.Influence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProvincialEffectId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RegionalEffectId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProvincialEffectId");

                    b.HasIndex("RegionalEffectId");

                    b.HasIndex("ReligionId");

                    b.ToTable("Influences");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClimateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Fertility")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProvincialEffectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClimateId");

                    b.HasIndex("ProvincialEffectId")
                        .IsUnique();

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.ProvincialEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Fertility")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FertilityDependentFood")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Growth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProvincialSanitation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PublicOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RegularFood")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReligiousOsmosis")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResearchRate")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ProvincialEffects");

                    b.HasDiscriminator();
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCoastal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SlotsCountOffset")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.RegionalEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Fertility")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FertilityDependentFood")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Growth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProvincialSanitation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PublicOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RegionalSanitation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RegularFood")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReligiousOsmosis")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResearchRate")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("RegionalEffects");

                    b.HasDiscriminator();
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProvincialEffectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProvincialEffectId")
                        .IsUnique();

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.TechnologyLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AntilegacyProvincialEffectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FactionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UniversalProvincialEffectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AntilegacyProvincialEffectId")
                        .IsUnique();

                    b.HasIndex("FactionId");

                    b.HasIndex("UniversalProvincialEffectId")
                        .IsUnique();

                    b.ToTable("TechnologyLevels");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.Weather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Weathers");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.WeatherEffect", b =>
                {
                    b.Property<int>("ClimateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WeatherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProvincialEffectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClimateId", "WeatherId");

                    b.HasIndex("ProvincialEffectId")
                        .IsUnique();

                    b.HasIndex("WeatherId");

                    b.ToTable("WeatherEffects");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.Bonus", b =>
                {
                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.ProvincialEffect", null)
                        .WithMany()
                        .HasForeignKey("ProvincialEffectId");

                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.RegionalEffect", null)
                        .WithMany()
                        .HasForeignKey("RegionalEffectId");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.BuildingBranch", b =>
                {
                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.Religion", null)
                        .WithMany()
                        .HasForeignKey("ReligionId");

                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.Resource", null)
                        .WithMany()
                        .HasForeignKey("ResourceId");

                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.BuildingLevel", null)
                        .WithOne()
                        .HasForeignKey("TWBuildingAssistant.Data.Sqlite.Model.BuildingBranch", "RootBuildingLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.BuildingBranchUse", b =>
                {
                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.BuildingBranch", null)
                        .WithMany()
                        .HasForeignKey("BuildingBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.Faction", null)
                        .WithMany()
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.BuildingLevel", b =>
                {
                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.BuildingLevel", null)
                        .WithMany()
                        .HasForeignKey("ParentBuildingLevelId");

                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.RegionalEffect", null)
                        .WithOne()
                        .HasForeignKey("TWBuildingAssistant.Data.Sqlite.Model.BuildingLevel", "RegionalEffectId");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.BuildingLevelLock", b =>
                {
                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.BuildingLevel", null)
                        .WithMany()
                        .HasForeignKey("BuildingLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.TechnologyLevel", null)
                        .WithMany()
                        .HasForeignKey("TechnologyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.Influence", b =>
                {
                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.ProvincialEffect", null)
                        .WithMany()
                        .HasForeignKey("ProvincialEffectId");

                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.RegionalEffect", null)
                        .WithMany()
                        .HasForeignKey("RegionalEffectId");

                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.Religion", null)
                        .WithMany()
                        .HasForeignKey("ReligionId");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.Province", b =>
                {
                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.Climate", null)
                        .WithMany()
                        .HasForeignKey("ClimateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.ProvincialEffect", null)
                        .WithOne()
                        .HasForeignKey("TWBuildingAssistant.Data.Sqlite.Model.Province", "ProvincialEffectId");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.Region", b =>
                {
                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.Province", null)
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.Resource", null)
                        .WithMany()
                        .HasForeignKey("ResourceId");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.Religion", b =>
                {
                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.ProvincialEffect", null)
                        .WithOne()
                        .HasForeignKey("TWBuildingAssistant.Data.Sqlite.Model.Religion", "ProvincialEffectId");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.TechnologyLevel", b =>
                {
                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.ProvincialEffect", null)
                        .WithOne()
                        .HasForeignKey("TWBuildingAssistant.Data.Sqlite.Model.TechnologyLevel", "AntilegacyProvincialEffectId");

                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.Faction", null)
                        .WithMany()
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.ProvincialEffect", null)
                        .WithOne()
                        .HasForeignKey("TWBuildingAssistant.Data.Sqlite.Model.TechnologyLevel", "UniversalProvincialEffectId");
                });

            modelBuilder.Entity("TWBuildingAssistant.Data.Sqlite.Model.WeatherEffect", b =>
                {
                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.Climate", null)
                        .WithMany()
                        .HasForeignKey("ClimateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.ProvincialEffect", null)
                        .WithOne()
                        .HasForeignKey("TWBuildingAssistant.Data.Sqlite.Model.WeatherEffect", "ProvincialEffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TWBuildingAssistant.Data.Sqlite.Model.Weather", null)
                        .WithMany()
                        .HasForeignKey("WeatherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
